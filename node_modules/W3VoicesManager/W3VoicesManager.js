
// d√©pendances
	
	var
		CST_DEP_Path = require('path'),
		CST_DEP_HTTP = require('http'),
		CST_DEP_FileStream = require('fs'),
		CST_DEP_MKDirP = require('mkdirp');
		
// module
	
	module.exports = function () {

		// attributes

			var
				m_clThis = this,
				m_stRaces = {},
				m_clPlayer = new function() {

					var m_clThis = this;

					this.play = function (p_sSound, p_fCallback) {

						if ('' != p_sSound) {

							var exec = require('child_process').exec;

							exec('vlc "' + p_sSound + '" --play-and-exit', function(error, stdout, stderr) {
								
								if ('function' === typeof p_fCallback) {
									p_fCallback();
								}
								
							});

						}

						return m_clThis;

					};

				};

		// methodes
			
			// protected

				// races

					function _isRaceValid(p_sRace) {
						return (m_stRaces[p_sRace]);
					}

					// warnings

						function _isWarningValid(p_sRace, p_sWarning) {
							return (_isRaceValid(p_sRace) && m_stRaces[p_sRace].warnings[p_sWarning]);
						}

						// formate

							function _warningToFilePath(p_sRace, p_sWarning) {
								return CST_DEP_Path.join(__dirname, 'sounds', p_sRace, 'warnings', p_sWarning + '.mp3');
							}

					// musics

						function _isMusicValid(p_sRace, p_sMusic) {
							return (_isRaceValid(p_sRace) && m_stRaces[p_sRace].musics[p_sMusic]);
						}

						// formate

							function _musicToFilePath(p_sRace, p_sMusic) {
								return CST_DEP_Path.join(__dirname, 'sounds', p_sRace, 'musics', p_sMusic + '.mp3');
							}

					// character

						function _isCharacterValid(p_sRace, p_sCharacter) {
							return (_isRaceValid(p_sRace) && m_stRaces[p_sRace].characters[p_sCharacter]);
						}

						// actions

							function _isActionValid(p_sRace, p_sCharacter, p_sAction) {
								return (_isCharacterValid(p_sRace, p_sCharacter) && m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction]);
							}

							// action codes

								function _isActionCodeValid(p_sRace, p_sCharacter, p_sAction, p_sActionCode) {
									return (_isActionValid(p_sRace, p_sCharacter, p_sAction) && m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction].codes[p_sActionCode]);
								}

								function _randomedActionCode(p_sRace, p_sCharacter, p_sAction) {

									var
										stAction = m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction],
										tabCodes = m_clThis.getActionCodes(p_sRace, p_sCharacter, p_sAction);

									return tabCodes[Math.floor(Math.random() * tabCodes.length)];

								}

								// formate

									function _actionCodeToFilePath(p_sRace, p_sCharacter, p_sAction, p_sActionCode) {
										return CST_DEP_Path.join(__dirname, 'sounds', p_sRace, p_sCharacter, p_sAction, p_sActionCode + '.mp3');
									}

									function _actionCodeToUrl(p_sRace, p_sCharacter, p_sAction, p_sActionCode) {
										return m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction].codes[p_sActionCode];
									}

				// run

					function _download (p_sUrl, p_sFilePath, p_fCallback) {

						CST_DEP_HTTP.get(p_sUrl, function(response) {

							var sLog;

							if (0 <= [302, 403, 404, 500].indexOf(response.statusCode)) {

								sLog = '[HTTP ' + response.statusCode + '] Impossible de charger "' + p_sUrl + '"';

								CST_DEP_MKDirP(CST_DEP_Path.join(__dirname, 'logs'), function (err) {

									if (0 <= p_sUrl.indexOf('SoundHuman')) {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'human.txt'), sLog + "\r\n");
									}
									else if (0 <= p_sUrl.indexOf('SoundOrc')) {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'orc.txt'), sLog + "\r\n");
									}
									else if (0 <= p_sUrl.indexOf('SoundNight_Elfs')) {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'nightelf.txt'), sLog + "\r\n");
									}
									else if (0 <= p_sUrl.indexOf('SoundUndead')) {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'undead.txt'), sLog + "\r\n");
									}
									else if (0 <= p_sUrl.indexOf('SoundNeutral')) {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'neutral.txt'), sLog + "\r\n");
									}
									else {
										CST_DEP_FileStream.appendFileSync(CST_DEP_Path.join(__dirname, 'logs', 'others.txt'), sLog + "\r\n");
									}

								});

							}
							else {

								CST_DEP_MKDirP(CST_DEP_Path.dirname(p_sFilePath), function (err) {

						        	var clMP3 = CST_DEP_FileStream.createWriteStream(p_sFilePath);

						        	clMP3.on('open', function (fd) {

						        		response
							        		.on('data', function(chunk) {
						            			clMP3.write(chunk);
									        })
									        .on('end', function() {

					            				clMP3.end();

												if ('function' === typeof p_fCallback) {
													p_fCallback();
												}
											
											});

						        	});

								});

							}

						})
						.on('error', function(e) {
						  	console.log("Got error: " + e.message);
						});

						return m_clThis;

					}

					function _play(p_sUrl, p_sFilePath, p_fCallback) {

						if (!CST_DEP_FileStream.existsSync(p_sFilePath)) {

							_download(p_sUrl, p_sFilePath, function () {
								m_clPlayer.play(p_sFilePath, p_fCallback);
							});

						}
						else {
							m_clPlayer.play(p_sFilePath, p_fCallback);
						}

					}

			// public

				// races

					this.getRaces = function () {

						var tabResult = [];

							for (var race in m_stRaces) {
								tabResult.push(race);
							}

						return tabResult;

					};

					// warnings


						this.getWarnings = function (p_sRace) {

							var tabResult = [];

								if (_isRaceValid(p_sRace)) {

									for (var warning in m_stRaces[p_sRace].warnings) {
										tabResult.push(warning);
									}

								}

							return tabResult;

						};

						this.playWarning = function (p_sRace, p_sWarning, p_fCallback) {

							if (!_isRaceValid(p_sRace)) {
								console.log('mauvaise race');
							}
							else if (!_isWarningValid(p_sRace, p_sWarning)) {
								console.log('mauvais warning');
							}
							else {

								_play(
									m_stRaces[p_sRace].warnings[p_sWarning].url,
									_warningToFilePath(p_sRace, p_sWarning),
									p_fCallback
								);

							}

							return m_clThis;

						};

					// musics


						this.getMusics = function (p_sRace) {

							var tabResult = [];

								if (_isRaceValid(p_sRace)) {

									for (var music in m_stRaces[p_sRace].musics) {
										tabResult.push(music);
									}

								}

							return tabResult;

						};

						this.playMusic = function (p_sRace, p_sMusic, p_fCallback) {

							if (!_isRaceValid(p_sRace)) {
								console.log('mauvaise race');
							}
							else if (!_isMusicValid(p_sRace, p_sMusic)) {
								console.log('mauvaise music');
							}
							else {

								_play(
									m_stRaces[p_sRace].musics[p_sMusic].url,
									_musicToFilePath(p_sRace, p_sMusic),
									p_fCallback
								);

							}

							return m_clThis;

						};

					// characters

						this.getCharacters = function (p_sRace) {

							var tabResult = [];

								if (_isRaceValid(p_sRace)) {

									for (var character in m_stRaces[p_sRace].characters) {
										tabResult.push(character);
									}
									
								}

							return tabResult;

						};

						// actions

							this.getActions = function (p_sRace, p_sCharacter) {

								var tabResult = [];

									if (_isCharacterValid(p_sRace, p_sCharacter)) {

										for (var action in m_stRaces[p_sRace].characters[p_sCharacter].actions) {
											tabResult.push(action);
										}
										
									}

								return tabResult;

							};

							this.playRandomAction = function (p_sAction, p_fCallback) {

								var
									tabRaces = m_clThis.getRaces(),
									sRandomRace = tabRaces[Math.floor(Math.random() * tabRaces.length)],
									tabCharacters = m_clThis.getCharacters(sRandomRace),
									sRandomCharacter = tabCharacters[Math.floor(Math.random() * tabCharacters.length)];

								return m_clThis.playRandomActionCode(sRandomRace, sRandomCharacter, p_sAction, p_fCallback);

							};

							// action codes

								this.getActionCodes = function (p_sRace, p_sCharacter, p_sAction) {

									var tabResult = [];

										if (_isActionValid(p_sRace, p_sCharacter, p_sAction)) {

											for (var code in m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction].codes) {
												tabResult.push(code);
											}
											
										}

									return tabResult;

								};

								this.playActionCode = function (p_sRace, p_sCharacter, p_sAction, p_sActionCode, p_fCallback) {

									if (!_isCharacterValid(p_sRace, p_sCharacter)) {

										if (!_isRaceValid(p_sRace)) {
											console.log('mauvaise race');
										}
										else {
											console.log('mauvais personnage');
										}
										
									}
									else if (!_isActionValid(p_sRace, p_sCharacter, p_sAction)) {
										console.log('mauvaise action');
									}
									else if (!_isActionCodeValid(p_sRace, p_sCharacter, p_sAction, p_sActionCode)) {
										console.log('mauvais code action');
									}
									else {

										_play(
											m_stRaces[p_sRace].characters[p_sCharacter].actions[p_sAction].codes[p_sActionCode].url,
											_actionCodeToFilePath(p_sRace, p_sCharacter, p_sAction, p_sActionCode),
											p_fCallback
										);

									}

									return m_clThis;

								};

								this.playRandomActionCode = function (p_sRace, p_sCharacter, p_sAction, p_fCallback) {

									var sRandomedAction;

									if (!_isCharacterValid(p_sRace, p_sCharacter)) {

										if (!_isRaceValid(p_sRace)) {
											console.log('mauvaise race');
										}
										else {
											console.log('mauvais personnage');
										}
										
									}
									else if (!_isActionValid(p_sRace, p_sCharacter, p_sAction)) {
										console.log('mauvaise action');
									}
									else {
										m_clThis.playActionCode(p_sRace, p_sCharacter, p_sAction, _randomedActionCode(p_sRace, p_sCharacter, p_sAction), p_fCallback);
									}

									return m_clThis;

								};

				// run

					this.downloadAll = function () {

						m_clThis.getRaces().forEach(function (race) {

							m_clThis.getCharacters(race).forEach(function (character) {

								m_clThis.getActions(race, character).forEach(function(action) {

									m_clThis.getActionCodes(race, character, action).forEach(function(code) {

										var sMP3 = _actionCodeToFilePath(race, character, action, code);

										if (!CST_DEP_FileStream.existsSync(sMP3)) {

											_download(
												m_stRaces[race].characters[character].actions[action].codes[code].url,
												sMP3
											);

										}

									});

								});

							});

							m_clThis.getWarnings(race).forEach(function (warning) {

								var sMP3 = _warningToFilePath(race, warning);

								if (!CST_DEP_FileStream.existsSync(sMP3)) {

									_download(m_stRaces[race].warnings[warning].url, sMP3);

								}

							});

							m_clThis.getMusics(race).forEach(function (music) {

								var sMP3 = _musicToFilePath(race, music);

								if (!CST_DEP_FileStream.existsSync(sMP3)) {

									_download(m_stRaces[race].musics[music].url, sMP3);

								}

							});

						});

						return m_clThis;

					};


		// constructor

		m_stRaces = JSON.parse(CST_DEP_FileStream.readFileSync(CST_DEP_Path.join(__dirname, 'data.json'), 'utf8'));

	};
	