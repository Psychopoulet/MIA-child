
// d√©pendances
	
	var
		CST_DEP_Path = require('path'),
		CST_DEP_HTTP = require('http'),
		CST_DEP_FileStream = require('fs'),
		CST_DEP_MKDirP = require('mkdirp');
		
// module
	
	module.exports = function () {

		// attributes

			var
				m_clThis = this,
				m_stData;

		// methodes
			
			// protected

				function _readJSONData() {

					if (!m_stData) {
						m_stData = JSON.parse(CST_DEP_FileStream.readFileSync(CST_DEP_Path.join(__dirname, 'data.json'), 'utf8'));
					}

					return m_stData;

				}

				// races

					function _getRace(p_sRace) {

						var stResult = {};

							_readJSONData().races.every(function (race) {
								if (race.name === p_sRace) {
									stResult = race;
									return false;
								}
								return true;
							});

						return stResult;

					};

					function _isRaceValid(p_sRace) {
						return (_getRace(p_sRace));
					}

					// warnings

						function _getWarning(p_sRace, p_sWarning) {

							var stResult = {}, stRace = _getRace(p_sRace);

								if (stRace) {

									stRace.warnings.every(function (warning) {
										if (warning.name === p_sWarning) {
											stResult = warning;
											return false;
										}
										return true;
									});

								}

							return stResult;

						};

						function _isWarningValid(p_sRace, p_sWarning) {
							return (_getWarning(p_sRace, p_sWarning));
						}

						// formate

							function _warningToFilePath(p_sRace, p_sWarning) {
								return CST_DEP_Path.join(__dirname, 'voices', p_sRace, 'warnings', p_sWarning + '.mp3');
							}

							function _warningToUrl(p_sRace, p_sWarning) {
								return _getRace(p_sRace).url + _getWarning(p_sRace, p_sWarning).url + '_w3.mp3';
							}

					// character

						function _getCharacter(p_sRace, p_sCharacter) {

							var stResult = {}, stRace = _getRace(p_sRace);

								if (stRace) {

									stRace.characters.every(function (character) {
										if (character.name === p_sCharacter) {
											stResult = character;
											return false;
										}
										return true;
									});

								}

							return stResult;

						};

						function _isCharacterValid(p_sRace, p_sCharacter) {
							return (_getCharacter(p_sRace, p_sCharacter));
						}

						// actions

							function _getAction(p_sAction) {

								var stResult = {};

									_readJSONData().actions.every(function (action) {
										if (action.name === p_sAction) {
											stResult = action;
											return false;
										}
										return true;
									});

								return stResult;

							};

							function _isActionValid(p_sAction) {
								return (_getRace(p_sAction));
							}

							function _randomedAction(p_sAction) {
								var stAction = _getAction(p_sAction);
								return stAction.codes[Math.floor(Math.random() * stAction.codes.length)];
							}

							// formate

								function _characterActionToFilePath(p_sRace, p_sCharacter, p_sAction) {
									return CST_DEP_Path.join(__dirname, 'voices', p_sRace, p_sCharacter, p_sAction + '.mp3');
								}

								function _characterActionToUrl(p_sRace, p_sCharacter, p_sUrlAction) {
									return _getRace(p_sRace).url + _getCharacter(p_sRace, p_sCharacter).url + p_sUrlAction + '_w3.mp3';
								}

				// run

					function _download (p_sUrl, p_sFilePath, p_fCallback) {

						CST_DEP_MKDirP(CST_DEP_Path.dirname(p_sFilePath), function (err) {

							CST_DEP_HTTP.get(p_sUrl, function(response) {

				        		// console.log(response);

					        	var clMP3 = CST_DEP_FileStream.createWriteStream(p_sFilePath);

					        	clMP3.on('open', function (fd) {

					        		response
						        		.on('data', function(chunk) {
					            			clMP3.write(chunk);
								        })
								        .on('end', function() {

				            				clMP3.end();

											if ('function' === typeof p_fCallback) {
												p_fCallback();
											}
										
										});

					        	});

							})
							.on('error', function(e) {
							  	console.log("Got error: " + e.message);
							});

						});

						return m_clThis;

					}

					function _play(p_sUrl, p_sFilePath, p_fCallback) {

						if (!CST_DEP_FileStream.existsSync(p_sFilePath)) {

							_download(p_sUrl, p_sFilePath, function () {

								var exec = require('child_process').exec;

								exec(p_sFilePath, function(error, stdout, stderr) {

									if ('function' === typeof p_fCallback) {
										p_fCallback();
									}
									
								});

							});

						}
						else {

							var exec = require('child_process').exec;

							exec(p_sFilePath, function(error, stdout, stderr) {
								
								if ('function' === typeof p_fCallback) {
									p_fCallback();
								}
								
							});

						}

					}

			// public

				// races

					this.getRaces = function () {

						var tabResult = [];

							_readJSONData().races.forEach(function (race) {
								tabResult.push(race.name);
							});

						return tabResult;

					};

					// warnings


						this.getWarnings = function (p_sRace) {

							var tabResult = [];

								_readJSONData().races.every(function (race) {

									if (race.name === p_sRace) {

										race.warnings.forEach(function(warning) {
											tabResult.push(warning.name);
										});

										return false;

									}

									return true;

								});

							return tabResult;

						};

						this.playWarning = function (p_sRace, p_sWarning, p_fCallback) {

							if (!_isRaceValid(p_sRace)) {
								console.log('mauvaise race');
							}
							else if (!_isWarningValid(p_sRace, p_sWarning)) {
								console.log('mauvais warning');
							}
							else {

								_play(
									_characterActionToUrl(p_sRace, p_sWarning),
									_warningToFilePath(p_sRace, p_sWarning),
									p_fCallback
								);

							}

							return m_clThis;

						};

					// characters

						this.getCharacters = function (p_sRace) {

							var tabResult = [];

								_readJSONData().races.every(function (race) {

									if (race.name === p_sRace) {

										race.characters.forEach(function(character) {
											tabResult.push(character.name);
										});

										return false;

									}

									return true;

								});

							return tabResult;

						};

						// actions

							this.getActions = function () {

								var tabResult = [];

									_readJSONData().actions.forEach(function (action) {
										tabResult.push(action.name);
									});

								return tabResult;

							};

							this.playAction = function (p_sRace, p_sCharacter, p_sAction, p_fCallback) {

								var sRandomedAction;

								if (!_isCharacterValid(p_sRace, p_sCharacter)) {

									if (!_isRaceValid(p_sRace)) {
										console.log('mauvaise race');
									}
									else {
										console.log('mauvais personnage');
									}
									
								}
								else if (!_isActionValid(p_sAction)) {
									console.log('mauvaise action');
								}
								else {

									sRandomedAction = _randomedAction(p_sAction);

									_play(
										_characterActionToUrl(p_sRace, p_sCharacter, sRandomedAction),
										_characterActionToFilePath(p_sRace, p_sCharacter, sRandomedAction),
										p_fCallback
									);

								}

								return m_clThis;

							};

							this.playRandomAction = function (p_sAction, p_fCallback) {

								var stRandomRace, stRandomCharacter, tabRaces = _readJSONData().races;

									stRandomRace = tabRaces[Math.floor(Math.random() * tabRaces.length)];
									stRandomCharacter = stRandomRace.characters[Math.floor(Math.random() * stRandomRace.characters.length)];

								return m_clThis.playAction(stRandomRace.name, stRandomCharacter.name, p_sAction, p_fCallback);

							};

				// run

					this.downloadAll = function () {

						_readJSONData().races.forEach(function (race) {

							race.characters.forEach(function (character) {

								_readJSONData().actions.forEach(function(action) {

									action.codes.forEach(function(code) {

										var sMP3 = _characterActionToFilePath(race.name, character.name, code);

										if (!CST_DEP_FileStream.existsSync(sMP3)) {

											_download(
												_characterActionToUrl(race.name, character.name, code), sMP3, p_fCallback
											);

										}

									});

								});

							});

							race.warnings.forEach(function (warning) {

								var sMP3 = _warningToFilePath(race.name, warning.name);

								if (!CST_DEP_FileStream.existsSync(sMP3)) {

									_download(
										_warningToUrl(race.name, warning.name), sMP3, p_fCallback
									);

								}

							});

						});

						return m_clThis;

					};

	};
	