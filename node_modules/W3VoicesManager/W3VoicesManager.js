
// d√©pendances
	
	var
		CST_DEP_Path = require('path'),
		CST_DEP_HTTP = require('http'),
		CST_DEP_FileStream = require('fs'),
		CST_DEP_MKDirP = require('mkdirp');
		
// module
	
	module.exports = function () {

		// attributes

			var _this = this;

		// methodes
			
			// protected

				function _dataToFilePath(p_sRace, p_sCharacter, p_sAction) {
					return CST_DEP_Path.join(__dirname, 'voices', p_sRace, p_sCharacter, p_sAction + '.mp3');;
				}

				function _getAction(p_sAction) {

					var stResult = {};

						_readJSONData().actions.every(function (action) {
							if (action.name === p_sAction) {
								stResult = action;
								return false;
							}
							return true;
						});

					return stResult;

				};

				function _isActionValid(p_sAction) {
					return (_getRace(p_sAction));
				}

				function _randomedAction(p_sAction) {
					var stAction = _getAction(p_sAction);
					return stAction.codes[Math.floor(Math.random() * stAction.codes.length)];
				}

				function _getRace(p_sRace) {

					var stResult = {};

						_readJSONData().races.every(function (race) {
							if (race.name === p_sRace) {
								stResult = race;
								return false;
							}
							return true;
						});

					return stResult;

				};

				function _isRaceValid(p_sRace) {
					return (_getRace(p_sRace));
				}

				function _getCharacter(p_sRace, p_sCharacter) {

					var stResult = {}, stRace = _getRace(p_sRace);

						if (stRace) {

							stRace.characters.every(function (character) {
								if (character.name === p_sCharacter) {
									stResult = character;
									return false;
								}
								return true;
							});

						}

					return stResult;

				};

				function _isCharacterValid(p_sRace, p_sCharacter) {
					return (_getCharacter(p_sRace, p_sCharacter));
				}

				function _download (p_sRace, p_sCharacter, p_sUrlAction, p_fCallback) {

					var sUrl, sMP3, stRace = _getRace(p_sRace), stCharacter = _getCharacter(p_sRace, p_sCharacter);

					sUrl = stRace.url;
					sUrl += stCharacter.code;
					sUrl += '/VF/' + stCharacter.code.replace(/_/g, '') + p_sUrlAction + '_w3.mp3';

					sMP3 = _dataToFilePath(p_sRace, p_sCharacter, p_sUrlAction);

						CST_DEP_MKDirP(CST_DEP_Path.dirname(sMP3), function (err) {

							CST_DEP_HTTP.get(sUrl, function(response) {

					        	var clMP3 = CST_DEP_FileStream.createWriteStream(sMP3);

					        	clMP3.on('open', function (fd) {

					        		response
						        		.on('data', function(chunk) {
					            			clMP3.write(chunk);
								        })
								        .on('end', function() {

				            				clMP3.end();

											if ('function' === typeof p_fCallback) {
												p_fCallback();
											}
										
										});

					        	});

							})
							.on('error', function(e) {
							  	console.log("Got error: " + e.message);
							});

						});

					return _this;

				}

				function _readJSONData() {
					return JSON.parse(CST_DEP_FileStream.readFileSync(CST_DEP_Path.join(__dirname, 'data.json'), 'utf8'));
				}

			// public

				this.getActions = function () {

					var tabResult = [];

						_readJSONData().actions.forEach(function (action) {
							tabResult.push(action.name);
						});

					return tabResult;

				};

				this.getRaces = function () {

					var tabResult = [];

						_readJSONData().races.forEach(function (race) {
							tabResult.push(race.name);
						});

					return tabResult;

				};

				this.getCharacters = function (p_sRace) {

					var tabResult = [];

						_readJSONData().races.every(function (race) {

							if (race.name === p_sRace) {

								race.characters.forEach(function(character) {
									tabResult.push(character.name);
								});

								return false;
							}

							return true;

						});

					return tabResult;

				};

				this.downloadAll = function () {

					_this.getRaces().forEach(function (race) {

						race = _getRace(race);

						race.characters.forEach(function (character) {

							_this.getActions().forEach(function(action) {

								action = _getAction(action);

								action.codes.forEach(function(code) {

									var sMP3 = _dataToFilePath(race.name, character.name, code);

									if (!CST_DEP_FileStream.existsSync(sMP3)) {
										_download(race.name, character.name, code);
									}

								});

							});

						});

					});

					return _this;

				};

				this.play = function (p_sRace, p_sCharacter, p_sAction, p_fCallback) {

					var sMP3, sAction;

					if (!_isCharacterValid(p_sRace, p_sCharacter)) {

						if (!_isRaceValid(p_sRace)) {
							console.log('mauvaise race');
						}
						else {
							console.log('mauvais personnage');
						}
						
					}
					else if (!_isActionValid(p_sAction)) {
						console.log('mauvaise action');
					}
					else {

						sUrlAction = _randomedAction(p_sAction);

						sMP3 = _dataToFilePath(p_sRace, p_sCharacter, sUrlAction);

						if (!CST_DEP_FileStream.existsSync(sMP3)) {

							_download(p_sRace, p_sCharacter, sUrlAction, function () {

								var exec = require('child_process').exec;

								exec(sMP3, function(error, stdout, stderr) {

									if ('function' === typeof p_fCallback) {
										p_fCallback();
									}
									
								});

							});

						}
						else {

							var exec = require('child_process').exec;

							exec(sMP3, function(error, stdout, stderr) {
								
								if ('function' === typeof p_fCallback) {
									p_fCallback();
								}
								
							});

						}

					}

					return _this;

				};

				this.playRandomCharacter = function (p_sAction, p_fCallback) {

					var stRandomRace, stRandomCharacter, tabRaces = _readJSONData().races;

						stRandomRace = tabRaces[Math.floor(Math.random() * tabRaces.length)];
						stRandomCharacter = stRandomRace.characters[Math.floor(Math.random() * stRandomRace.characters.length)];

					return _this.play(stRandomRace.name, stRandomCharacter.name, p_sAction, p_fCallback);

				};

	};
	